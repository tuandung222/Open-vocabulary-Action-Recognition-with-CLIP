name: CLIP HAR CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Check code formatting with Black
      run: |
        black . --check
    
    - name: Check imports with isort
      run: |
        isort . --check-only --profile black
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Type check with mypy
      run: |
        mypy CLIP_HAR_PROJECT

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run unit tests
      run: |
        pytest tests/unit_tests --verbose
    
    - name: Run integration tests
      run: |
        pytest tests/integration_tests --verbose
    
    - name: Generate test coverage report
      run: |
        pytest --cov=CLIP_HAR_PROJECT tests/ --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: tests
    if: github.event_name != 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata for training image
      id: meta-train
      uses: docker/metadata-action@v4
      with:
        images: tuandung12092002/clip-har-train
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=sha,format=short
    
    - name: Build and push training image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.train
        push: true
        tags: ${{ steps.meta-train.outputs.tags }}
        labels: ${{ steps.meta-train.outputs.labels }}
        cache-from: type=registry,ref=tuandung12092002/clip-har-train:buildcache
        cache-to: type=registry,ref=tuandung12092002/clip-har-train:buildcache,mode=max
    
    - name: Extract metadata for app image
      id: meta-app
      uses: docker/metadata-action@v4
      with:
        images: tuandung12092002/clip-har-app
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=sha,format=short
    
    - name: Build and push app image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile.app
        push: true
        tags: ${{ steps.meta-app.outputs.tags }}
        labels: ${{ steps.meta-app.outputs.labels }}
        cache-from: type=registry,ref=tuandung12092002/clip-har-app:buildcache
        cache-to: type=registry,ref=tuandung12092002/clip-har-app:buildcache,mode=max

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Build documentation
      run: |
        mkdocs build
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./site 